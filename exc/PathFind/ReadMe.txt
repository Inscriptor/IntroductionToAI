

Вершины, которые обходит алгоритм, имеют вид:

node(State,Length,TotalPenalty)

    State = текущее расписание, State = [event(ExamID,RoomID,Day,Hour)]
        Exam = id экзамена
        Room = id аудитории
        Day = день проведения экзамена
        Hour = час начала экзамена
    Length = длина текущего расписания
    TotalPenalty = общая сумма штрафов расписания


Соответственно, расписание ищем именно в таком виде, искомым расписанием будет такой State, что node(State,L,P) имеет наименьшую сумму штрафов.


-----------------------------------------------------------------------------------------------------------------------------------------------

Датасет содержит следующую информацию:

1. Список студентов: student(SID,Name): каждый студент имеет уникальный идентификатор 'SID' и имя 'Name'.

2. Список преподавателей: teacher(LID,Name): каждый преподаватель имеет уникальный идентификатор 'LID' и имя 'Name'.

3. Список курсов: course(CID,Name): каждый курс имеет уникальный идентификатор 'CID' и название 'Name'.

4. Список экзаменов: exam(EID,Name): каждый экзамен имеет уникальный идентификатор 'EID' и название 'Name'.

5. Список аудиторий: room(RID,Name): каждая аудитория имеет уникальный идентификатор 'RID' и название (номер) 'Name'.

6. Соответствие курсов и экзаменов: course_exam(CID,EID): Курсу 'CID' соответствует экзамен 'EID'. (Экзамен может соответствовать только одному курсу!)

7. Продолжительность экзамена: exam_duration(EID,Duration): Экзамен 'EID' продолжается 'Duration' часов.

8. Студенты, посещающие курс: follows(SID,CID): Студент 'SID' посещает курс 'CID'.

9. Преподаватели, читающие курс: teaches(LID,CID): Преподаватель 'LID' читает курс 'CID'. (Каждый курс читается только одним преподавателем!)

10. Вместимость аудиторий: capacity(RID,Capacity): Аудитория 'RID' может вместить до 'Capacity' студентов.

11. Первый день сессии: exams_start(FirstDay). Задается числом: например exams_start(10) - сессия начинается 10-го числа.

12. Последний день сессии: exams_end(LastDay). Если, например, сессия продолжается с 1 по 20-е число, то exams_start(1) и exams_end(20).

13. Доступность аудиторий: availability(RID,Day,From,Till): Аудитория 'RID' доступна в день 'Day' с 'From' до 'Till' часов. Время задается числом: 9, 10, 14, ...

14. Время, необходимое для проверки результатов экзамена: c_correction_time(EID,Days): 'Days' дней необходимо для проверки экзамена 'EID'. (Не считая дня проведения экзамена!)

15. Время, требуемое на подготовку к экзамену: c_study_time(EID,Days): 'Days' дней требуется для подготовки к экзамену 'EID'. (Не считая дня проведения экзамена!).


Обязательные ограничения:

    Все экзамены должны начинаться ровно в начале часа (например, в 15 часов, но не в 15:30).

    Экзамены могут быть проведены только в аудитории, которая свободна в течение всего времени, необходимого для проведения экзамена и вмещает
    всех студентов, которые должны сдавать экзамен.

    Два экзамена не могут быть проведены в одной аудитории в одно и то же время, если существует хотя бы один студент, который должен сдавать их оба
    или преподаватель преподает оба курса.


Индивидуальные ограничения

Данные ограничения не обязательны для соблюдения, однако несоблюдение их влечет штрафы. Лучшее расписание - такое, которое имеет наименьшую сумму штрафов.


    c_lunch_break(PID,Penalty): Штраф 'Penalty' налагается на каждый экзамен, на котором персона (преподаватель или студент) 'PID' должна присутствовать во время обеда (с 12 до 13 часов).

    c_no_exam_in_period(LID,Day,From,Till,Penalty): Штраф 'Penalty' налагается для каждого экзамена, который преподаватель 'LID' должен вести в день 'Day', в период с 'From' до 'Till' часов.
    
    c_not_in_period(PID,EID,Day,From,Till,Penalty): Штраф 'Penalty' налагается, если экзамен 'EID' проводится в день 'Day', в период с 'From' до 'Till' часов. Это ограничение персоны 'PID'.
    
    c_same_day(PID,Penalty): Штраф 'Penalty' налагается для каждой пары экзаменов, на которых персона 'PID' должна присутствовать в один день. Например, если человек имеет 3 экзамена за один день, то штраф налагается 3 раза.
    
    c_b2b(PID,Penalty): Штраф 'Penalty' налагается для каждой пары экзаменов, на которых персона 'PID' должна присутствовать, и которые идут подряд (back-to-back). Например, если у человека 3 экзамена подряд, то штраф наложится дважды.
    
    c_correction_penalty(LID,Penalty): Штраф 'Penalty' налагается за каждый день, которого недостало преподавателю для проверки экзамена.

    c_study_penalty(SID,Penalty): Штраф 'Penalty' налагается за каждый день, которого студенту 'SID' не хватило для подготовки к экзамену. Студенты могут готовиться к экзамену в день проведения другого экзамена (знаю, что не могут, но по условию могут). Соответственно, если, например, у студента в первый же день сесии 2 экзамена, на подготовку к которым надо минимум 2 дня, то штраф наложится 4 раза, т.к. не было вообще времени на подготовку.
